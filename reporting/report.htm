<!doctype html>
<html lang='en-us'>
<head>
<title>HTML5 Conformance Test Results</title>
<script>
var g_arrTestResultXml = new Array();
var g_arrBrowsers = new Array();
var g_iProcessedCounter = 0;
var g_arrApprovedTests = new Array();
var g_arrApprovedFeatures = new Array();
var g_arrUri = new Array();

notWhitespace = /\S/;

function cleanWhitespace(node)
{
    for (var x = 0; x < node.childNodes.length; x++)
    {
        var childNode = node.childNodes[x];
        
        if ((childNode.nodeType == 3)&&(!notWhitespace.test(childNode.nodeValue))) 
        {
            // that is, if it's a whitespace text node
            node.removeChild(node.childNodes[x]);
            x--;
        }
        if (childNode.nodeType == 1)
        {
            // elements can have text child nodes of their own
            cleanWhitespace(childNode);
        }
    }
}

function processXmlFile()
{  
    var xmlhttp = new XMLHttpRequest();

    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            try {
                xmlDom = xmlhttp.responseXML;
                cleanWhitespace(xmlDom);

                browser = new Object();
                browser.ua = xmlDom.getElementsByTagName('ua')[0].firstChild.nodeValue;
                browser.name = xmlDom.getElementsByTagName('browsername')[0].firstChild.nodeValue;
                browser.dateran = xmlDom.getElementsByTagName('dateran')[0].firstChild.nodeValue;
                browser.results = new Array();
                browser.details = new Array();

                oTests = xmlDom.getElementsByTagName('test');
                var oLastObject;

                for (var i = 0; i < oTests.length; i++) 
                {
                    // split and find feature name - e.g. 'canvas' in this uri
                    //"http://test.w3.org/html/tests/approved/canvas/canvastest.htm"
                    arrURI = xmlDom.getElementsByTagName('test')[i].firstChild.firstChild.nodeValue.split(/\//);
                    // the name is 2nd to the last
                    name = arrURI[arrURI.length - 2];

                    result = xmlDom.getElementsByTagName('test')[i].firstChild.nextSibling.firstChild.nodeValue;

                    details = new Object();
                    details.uri = xmlDom.getElementsByTagName('test')[i].firstChild.firstChild.nodeValue;

                    details.name = name + "(" + arrURI[arrURI.length - 1] + ")";
                    details.result = result;

                    browser.details.push(details);

                    // if (oLastObject && oLastObject.name == feature)
                    // set pass/fail data 
                    // else find it in the array, if not found the add it to the array
                    // 
                    if (oLastObject && name == oLastObject.name) 
                    {
                        if (result == "Pass") 
                        {
                            oLastObject.pass++;
                        }
                        else if (result == "Fail") 
                        {
                            oLastObject.fail++;
                        }
                    }
                    else {
                        bFound = false;

                        for (var j = 0; j < browser.results.length; j++) 
                        {
                            if (browser.results[j].name == name) 
                            {
                                if (result == "Pass") 
                                {
                                    browser.results[j].pass++;
                                }
                                else if (result == "Fail") 
                                {
                                    browser.results[j].fail++;
                                }
                                oLastObject = browser.results[j];
                                bFound = true;
                                break;
                            }
                        }

                        if (!bFound) 
                        {
                            newResult = new Object();
                            newResult.name = name;
                            newResult.pass = 0;
                            newResult.fail = 0;

                            if (result == "Pass") 
                            {
                                newResult.pass++;
                            }
                            else if (result == "Fail") 
                            {
                                newResult.fail++;
                            }
                            browser.results.push(newResult);
                            oLastObject = browser.results[browser.results.length - 1];
                        }

                    }
                }
                g_iProcessedCounter++;
                g_arrBrowsers.push(browser);

            } catch (e) { }

            // Need to process next xml file
            processXmlFile();
            
            if (g_iProcessedCounter == g_arrTestResultXml.length)
            {
                WriteResults();
            }
        }
    }; 

    if (g_iProcessedCounter<g_arrTestResultXml.length)
    {
        xmlhttp.open("GET", g_arrTestResultXml[g_iProcessedCounter], true);
        xmlhttp.send(null);
    }
}

function getTestResultFileList()
{
    items = document.getElementsByTagName('iframe')[0].contentDocument.getElementsByTagName('a');
    var temp = "";
    
    for (var i = 0;i<items.length;i++)
    {
        if(items[i].href.match(/.xml/))
        {
            g_arrTestResultXml.push(items[i].href);
        }
    }
   
    processXmlFile();
}

function getTestResultXmlFiles()
{
    // points to location of the approvedtest.txt file
    //var uri = "results/approvedtests.txt";
    var uri = "http://w3c-test.org/html/tests/harness/approvedtests.txt";
   
    var xmlhttp = new XMLHttpRequest();

    xmlhttp.onreadystatechange  = function()
    { 
        if(xmlhttp.readyState  == 4)
        {
            var fileData = xmlhttp.responseText;
            g_arrApprovedTests = fileData.split('\n');
            document.getElementById('iTotalNumber').innerHTML = g_arrApprovedTests.length;
            
            var temp = "";
            var fn = 0;
            
            // go through all the approved tests and build the list of approved features and approved test names
            for (var i=0;i<g_arrApprovedTests.length;i++)
            {
                // split the test URI
                arrURI = g_arrApprovedTests[i].split(/\//);
                
                // get the feature name
                var featureName = arrURI[arrURI.length-2];
                
                // remove duplicates
                if(arrURI.length == 8 && featureName != temp)
                {
                    g_arrApprovedFeatures[fn] = featureName;
                    fn++;
                    temp = featureName;
                }
                
                // approved tests should include feature and test file
                var uri = arrURI[arrURI.length-1];
                uri = uri.substring(0, uri.length-1);
                g_arrApprovedTests[i] = featureName + "(" + uri + ")";
            }
                   
            // create the iframe to hold the test results
            oIframe = document.createElement('iframe');
            document.body.appendChild(oIframe);
            
            // when the iframe loads, process the test results
            if(window.addEventListener)
            {
                oIframe.onload = getTestResultFileList;
            }
            else
            {
                oIframe.attachEvent('onload', getTestResultFileList);
            }

            // points to location of xml files
            oIframe.src = 'http://w3c-test.org/html/tests/reporting/';
            // for testing
            //oIframe.src = 'http://localhost/reporting/';
        }
    }; 

    xmlhttp.open("GET", uri, true);
    xmlhttp.send(null);
}

function WriteResults()
{
    var detailTableRows = "<table style='background:#eeeeee; font-family:Helvetica Neue,Helvetica,Arial,Verdana,Geneva,sans-serif; color: #47587c; font-size: small;' cellpadding='5' border='1'><tr><td style='background:#1c6ca7;color:#ffffff'>Tests</td>";
    var featureTableRows = "<table style='background:#eeeeee; font-family:Helvetica Neue,Helvetica,Arial,Verdana,Geneva,sans-serif; color: #47587c;' cellpadding='5' border='1'><tr><td style='background:#1c6ca7;color:#ffffff'>Feature</td>";

    for (var i = 0; i < g_arrBrowsers.length; i++)
    {
        detailTableRows += "<td>" + g_arrBrowsers[i].name + "<br>(" + g_arrBrowsers[i].dateran + ")</td>";
        featureTableRows += "<td>" + g_arrBrowsers[i].name + "</td>";
    }
    
    detailTableRows += "</tr>";
    featureTableRows += "</tr>";

    for (var i = 0; i < g_arrApprovedFeatures.length; i++)
    {
        // format the feature name
        switch (g_arrApprovedFeatures[i]) 
        {
            case "attributes":
                newname = "Attributes";
                break;
            case "audio":
                newname = "Audio";
                break;
            case "canvas":
                newname = "Canvas";
                break;
            case "getelementsbyclassname":
                newname = "getElementsByClassName";
                break;
            case "foreigncontent":
                newname = "Foreign Content";
                break;
            case "video":
                newname = "Video";
                break;
            case "xhtml5":
                newname = "XHTML";
                break;
            default:
                newname = g_arrApprovedFeatures[i];
        }
        
        featureTableRows += "<tr><td>" + newname + "</td>";
        
        for (var j = 0; j < g_arrBrowsers.length; j++)
        {
            var bFound = false;
            for (var k=0; k<g_arrBrowsers[j].results.length;k++)
            {
                if (g_arrApprovedFeatures[i] == g_arrBrowsers[j].results[k].name)
                {
                    featureTableRows += "<td>" + Math.round(((g_arrBrowsers[j].results[k].pass/(g_arrBrowsers[j].results[k].fail+g_arrBrowsers[j].results[k].pass))*100)*100)/100 + "%</td>";
                    bFound = true;
                    break;
                }
            }
            if (!bFound)
            {
                featureTableRows += "<td>No Results</td>";
            }
        }
        featureTableRows += "</tr>";
    }
    
    for (var i = 0; i < g_arrApprovedTests.length; i++)
    {
        detailTableRows += "<td>" + g_arrApprovedTests[i] + "</td>";
        
        for (var j=0;j<g_arrBrowsers.length;j++)
        {
            var foundMatch = false;
            for (var k=0;k<g_arrBrowsers[j].details.length;k++)
            {
                if (g_arrApprovedTests[i] == g_arrBrowsers[j].details[k].name)
                {
                    detailTableRows += "<td><a href='"+ g_arrBrowsers[j].details[k].uri + "'>" + g_arrBrowsers[j].details[k].result + "</a></td>";
                    foundMatch = true;
                    break;
                }
            }
            if (!foundMatch)
            {
                detailTableRows += "<td>No Result</td>";
            }
        }
        detailTableRows += "</tr>";
    }        

    detailTableRows += "</table>";
    featureTableRows += "</table>";
    
    document.getElementById('oTestResults').innerHTML = featureTableRows;    
    document.getElementById('oTestDetails').innerHTML = detailTableRows;
}
</script>
<style>
BODY
{
	text-align: justify;
	color: #333;
	line-height: 1.3;
	font-family: "Gill Sans MT", "Gill Sans", GillSans, Arial, Helvetica, sans-serif;
	background-image: none;
	background-attachment: scroll;
	background-repeat: repeat;
	background-position-x: 0%;
	background-position-y: 0%;
	background-color: white;
}
H1
{
	text-align: left;
	line-height: 1;
	padding-top: 0px;
	padding-right: 0px;
	padding-bottom: 0.2em;
	padding-left: 0px;
	font-variant: small-caps;
	font-weight: normal;
	border-bottom-width: thin;
	border-bottom-style: solid;
	font-style: italic;
	border-bottom-style: none;
	color: #000;
}
IFRAME
{
        display: none;
}
</style>
</head>
<body onload='getTestResultXmlFiles()' >
<img alt="W3C" src="http://www.w3.org/Icons/w3c_home" />
<h1>HTML5 Test Suite Conformance Results</h1>
<blockquote>
  <p>&#8220;Interoperability is the ability of two or more systems or
  components to exchange information and to use the information that
  has been exchanged.&#8221;</p>
  <p style='text-align: right;'>-IEEE</p>
</blockquote>
<p>Interoperability is important to web designers. Good test suites
drive interoperability. They're a key part of making sure web
standards are implemented correctly and consistently. More tests
encourage more interoperability.</p>
<p>
  The HTML5 Test Suite Results aims to help implementers
   write applications that support HTML5. In no way are these
   conformance tests to be construed as providing certification or
   branding of HTML5 implementations. The only claim that could be
   made is that a particular implementation is conformant to a
   particular version of the HTML5 Test Suite.
</p>
<div style="border: 4px solid red; padding: 1ex; width: 80%; margin: auto;border-radius: 30px;">
 <p>
The HTML5 Test suite is still being developed.  The number of tests
   and the results on these tests will change.
</p>
<p>
The results in this document may be updated, replaced or obsoleted by
others documents at any time.
</p>
<p>
It is inappropriate to cite those results as other than work in
progress and unstable.
</p>
</div>
<p>
Below is the results obtained when using the approved HTML5 tests that have been
agreed upon by the HTML WG as valid per the HTML5 specification.  The
tests can be run and inspected individually using our test runner,
see the <a href='http://test.w3.org/html/tests/harness/harness.htm'>test harness</a>.
If you have feedback about the tests please send email
to <a href='mailto:public-html-testsuite@w3.org'>public-html-testsuite@w3.org</a>
list.</p>
<center>
<p>
The test suite contains <span id='iTotalNumber'>0</span> tests. That's not enough and we need your help.
</p>

<table><tr><td id='oTestResults'>Processing results...</td></tr></table>

<p>This is the detailed results across the userAgents</p>
<table><tr><td id="oTestDetails"></td></tr></table>
</center>
</body>
</html>
